global:
  octavo_endpoint: https://filter-octavo.rahtiapp.fi/filter/
choices_queries:
  collectors: 'SELECT name AS value FROM collectors;'
  places: 'SELECT IF(plp.name IS NOT NULL,
                     CONCAT(pl.name, " (", plp.name, ")"),
                     pl.name) as label,
                  pl.name as value
           FROM places pl
             LEFT JOIN places plp ON pl.par_id = plp.pl_id;'
  types: 'SELECT CONCAT(name, " (", type_orig_id, ")") as label, type_orig_id as value
          FROM types;'
  clusterings: 'SELECT name AS label, clustering_id AS value FROM v_clusterings;'
  skvr_volumes: 'SELECT DISTINCT value
                 FROM raw_meta NATURAL JOIN poems
                 WHERE nro LIKE "skvr%" AND field = "OSA";'
visualizations:
  map_npoems:
    type: map
    description: 'map: Number of poems'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, SUM(pls.npoems) AS y
            FROM place_stats pls
              JOIN pol_pl ON pls.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE pls.npoems > 0
              AND pls.collection IN ({{{ collection }}})
            GROUP BY pol_pl.pol_id;'
    params:
      - name: collection
        description: 'Collection'
        widget: checkboxGroupInput
        choices: { skvr: '"skvr"', erab: '"erab"', jr: '"jr"', literary: '"literary"' }
        default: ['"skvr"', '"erab"', '"jr"']
        inline: true
  map_nverses:
    type: map
    description: 'map: Number of verses'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, SUM(pls.nverses) AS y
            FROM place_stats pls
              JOIN pol_pl ON pls.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE pls.nverses > 0
              AND pls.collection IN ({{{ collection }}})
            GROUP BY pol_pl.pol_id;'
    params:
      - name: collection
        description: 'Collection'
        widget: checkboxGroupInput
        choices: { skvr: '"skvr"', erab: '"erab"', jr: '"jr"', literary: '"literary"' }
        default: ['"skvr"', '"erab"', '"jr"']
        inline: true
  map_nwords:
    type: map
    description: 'map: Number of words'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, SUM(pls.nwords) AS y
            FROM place_stats pls
              JOIN pol_pl ON pls.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE pls.nwords > 0
              AND pls.collection IN ({{{ collection }}})
            GROUP BY pol_pl.pol_id;'
    params:
      - name: collection
        description: 'Collection'
        widget: checkboxGroupInput
        choices: { skvr: '"skvr"', erab: '"erab"', jr: '"jr"', literary: '"literary"' }
        default: ['"skvr"', '"erab"', '"jr"']
        inline: true
  map_ntypes:
    type: map
    description: 'map: Number of types'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, COUNT(DISTINCT pt.t_id) AS y
            FROM p_typ pt
              JOIN types t ON pt.t_id = t.t_id
              JOIN p_pl ON pt.p_id = p_pl.p_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE ({{{incl_erab_orig}}} OR t.type_orig_id NOT LIKE "erab_orig%")
            GROUP BY pol_pl.pol_id;'
    params:
      - name: incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  map_type:
    type: map
    description: 'map: Number of poems by type'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name,
                   SUM(t.n)
                   / IF({{{relative}}} AND SUM(pls.npoems) > 0, SUM(pls.npoems), 1) AS y
            FROM
              (SELECT p_pl.pl_id, COUNT(DISTINCT p_pl.p_id) AS n
               FROM p_typ pt
                 JOIN types t1 ON pt.t_id = t1.t_id
                 LEFT JOIN types t2 ON t1.par_id = t2.t_id
                 LEFT JOIN types t3 ON t2.par_id = t3.t_id
                 LEFT JOIN types t4 ON t3.par_id = t4.t_id
                 JOIN p_pl ON pt.p_id = p_pl.p_id
               WHERE (t1.type_orig_id = "{{{type_id}}}"
                      OR t2.type_orig_id = "{{{type_id}}}"
                      OR t3.type_orig_id = "{{{type_id}}}"
                      OR t4.type_orig_id = "{{{type_id}}}")
               GROUP BY p_pl.pl_id) t
              LEFT JOIN (
                SELECT pl_id, SUM(npoems) AS npoems
                FROM place_stats
                WHERE collection IN ({{{ collection }}})
                GROUP BY pl_id
              ) pls ON pls.pl_id = t.pl_id
              JOIN pol_pl ON t.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            GROUP BY pol_pl.pol_id;'
    params:
      - name: type_id
        description: 'Type ID'
        widget: selectizeInput
        choices_query: types
      - name: relative
        description: 'Show relative amounts'
        widget: checkboxInput
      - name: collection
        description: 'Collection'
        widget: checkboxGroupInput
        choices: { skvr: '"skvr"', erab: '"erab"', jr: '"jr"', literary: '"literary"' }
        default: ['"skvr"', '"erab"']
        inline: true
  map_volume:
    type: map
    description: 'map: Number of poems by SKVR volume'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, count(*) AS y
            FROM poems p
              JOIN raw_meta rm ON p.p_id = rm.p_id AND rm.field = "OSA"
              JOIN p_pl ON p.p_id = p_pl.p_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE p.nro LIKE "skvr%" AND rm.value = "{{{volume}}}"
            GROUP BY pol_pl.pol_id;'
    params:
      - name: volume
        description: 'Volume'
        widget: selectizeInput
        choices_query: skvr_volumes
  map_collector:
    type: map
    description: 'map: Number of poems by collector'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, count(*) AS y
            FROM p_col
              JOIN collectors c ON p_col.col_id = c.col_id
              JOIN p_pl ON p_col.p_id = p_pl.p_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE c.name = "{{{collector}}}" GROUP BY pol_pl.pol_id;'
    params:
      - name: collector
        description: 'Collector name'
        widget: selectizeInput
        choices_query: collectors
  map_time_int:
    type: map
    description: 'map: Number of poems in a time interval'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, count(*) AS y
            FROM p_year
              JOIN p_pl ON p_year.p_id = p_pl.p_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE p_year.year BETWEEN {{{min}}} AND {{{max}}}
            GROUP BY pol_pl.pol_id;'
    params:
      - name: min
        description: From year
        widget: numericInput
        default: 1800
      - name: max
        description: To year
        widget: numericInput
        default: 1930
  map_word:
    type: map
    description: 'map: Word frequency'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, count(*) AS y
            FROM words w
              JOIN word_occ wo ON w.w_id = wo.w_id
              JOIN verse_poem vp ON wo.v_id = vp.v_id
              JOIN p_pl ON vp.p_id = p_pl.p_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE w.text {{{operator}}} "{{{word}}}"
            GROUP BY pol_pl.pol_id;'
    params:
      - name: word
        description: 'Word'
        widget: textInput
      - name: operator
        description: 'Operator'
        widget: selectInput
        choices: ['=', 'LIKE', 'REGEXP']
  map_word_rel:
    type: map
    description: 'map: Word relative frequency'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, SUM(n) as n, sum(pls.nwords) as n_total,
                   SUM(n)/sum(pls.nwords) AS y
            FROM (
                SELECT
                  p_pl.pl_id, COUNT(*) AS n
                FROM
                  words w
                  JOIN word_occ wo ON w.w_id = wo.w_id
                  JOIN verse_poem vp ON wo.v_id = vp.v_id
                  JOIN p_pl ON vp.p_id = p_pl.p_id
                WHERE w.text {{{operator}}} "{{{word}}}"
                GROUP BY p_pl.pl_id
              ) t
              JOIN place_stats pls ON t.pl_id = pls.pl_id
              JOIN pol_pl ON t.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE pls.nwords > 0
            GROUP BY pol_pl.pol_id;'
    params:
      - name: word
        description: 'Word'
        widget: textInput
      - name: operator
        description: 'Operator'
        widget: selectInput
        choices: ['=', 'LIKE', 'REGEXP']
  map_cluster:
    type: map
    description: 'map: Verse cluster'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, count(*) AS y
            FROM verse_poem vp1
              JOIN poems p1 ON vp1.p_id = p1.p_id
              JOIN v_clust vc1 ON vc1.v_id = vp1.v_id
                                  AND vc1.clustering_id = {{{clustering}}}
              JOIN v_clust vc2 ON vc1.clust_id = vc2.clust_id
                                  AND vc2.clustering_id = {{{clustering}}}
              JOIN verse_poem vp2 ON vp2.v_id = vc2.v_id
              JOIN p_pl ON p_pl.p_id = vp2.p_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE p1.nro = "{{{nro}}}" AND vp1.pos = {{{pos}}}
            GROUP BY pol_pl.pol_id;'
    params:
      - name: clustering
        description: 'Clustering'
        widget: selectizeInput
        choices_query: clusterings
      - name: nro
        description: 'Poem ID'
        widget: textInput
      - name: pos
        description: 'Verse position'
        widget: numericInput
  map_passage:
    type: map
    description: 'map: Passage'
    source: url
    query: 'http://runoregi.rahtiapp.fi/passage?nro={{{nro}}}&start={{{start}}}&end={{{end}}}&clustering={{{clustering}}}&dist={{{dist}}}&hitfact={{{hitfact}}}&format=csv'
    group_by: place
    params:
      - name: clustering
        description: 'Clustering'
        widget: selectizeInput
        choices_query: clusterings
      - name: nro
        description: 'Poem ID'
        widget: textInput
      - name: start
        description: 'Start position'
        widget: numericInput
      - name: end
        description: 'End position'
        widget: numericInput
      - name: dist
        description: 'Maximum distance'
        widget: numericInput
      - name: hitfact
        description: 'Hit factor'
        widget: numericInput
        default: 0.5
        step: 0.1
  map_poem_cluster:
    type: map
    description: 'map: Poem cluster'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, count(*) AS y
            FROM poems p
              JOIN p_clust pc1 ON p.p_id = pc1.p_id
              JOIN p_clust pc2 ON pc1.clust_id = pc2.clust_id
              JOIN p_pl ON p_pl.p_id = pc2.p_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE p.nro = "{{{nro}}}"
            GROUP BY pol_pl.pol_id;'
    params:
      - name: nro
        description: 'Poem ID'
        widget: textInput
  map_sim_poems:
    type: map
    description: 'map: Similar poems'
    source: sql
    query: 'SELECT pol_pl.pol_id, pol.name, count(*) AS y
            FROM p_sim s
              JOIN poems p1 ON s.p1_id = p1.p_id
              JOIN p_pl ON p_pl.p_id = s.p2_id
              JOIN pol_pl ON p_pl.pl_id = pol_pl.pl_id
              JOIN polygons pol ON pol_pl.pol_id = pol.pol_id
            WHERE p1.nro = "{{{nro}}}"
            GROUP BY pol_pl.pol_id;'
    params:
      - name: nro
        description: 'Poem ID'
        widget: textInput
  map_octavo:
    type: map
    description: 'map: Custom Octavo query'
    source: octavo
    query: '{{{octavo_query}}}'
    level: '{{{octavo_level}}}'
    fields:
      - place_id
    group_by: place_id
    extractor: 'function(x) x$place_id'
    varname: place_id
    snippets: false
    params:
      - name: octavo_query
        description: 'Query'
        widget: textAreaInput
        rows: 5
      - name: octavo_level
        description: 'Level'
        widget: selectInput
        choices: [ VERSE, POEM ]
  map_custom_sql:
    type: map
    description: 'map: Custom SQL query'
    source: sql
    helptext: 'The resulting table should contain the following columns:
               either `pol_id` (for polygon ID), `place_id` or
               `place_name` to identify the place, and `y` for the value
               to display. Only using polygon IDs guarantees correct results.'
    query: '{{{query}}}'
    params:
      - name: query
        description: 'Query'
        widget: textAreaInput
        rows: 5
  map_custom_csv:
    type: map
    description: 'map: Custom CSV'
    source: csv
    helptext: 'The CSV should contain at least the following columns:
               either `pol_id` (for polygon ID), `place_id` or
               `place_name` to identify the place, and `y` for the value
               to display. Only using polygon IDs guarantees correct results.
               A header is obligatory.'
    query: '{{{csv}}}'
    params:
      - name: csv
        description: 'Paste CSV here'
        widget: textAreaInput
        rows: 5
  tree_types:
    type: tree
    description: 'tree: Poems by type'
    source: sql
    query: 'SELECT t.type_orig_id AS type_id, t.name, COUNT(*) AS y
            FROM
              types t
              JOIN p_typ pt ON pt.t_id = t.t_id
            WHERE t.type_orig_id LIKE "{{{collection}}}_%"
                  AND t.type_orig_id NOT LIKE "erab_orig%"
                  AND t.type_orig_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: collection
        description: 'Collection'
        widget: selectInput
        choices: [ skvr, erab ]
        default: skvr_
  tree_types_col:
    type: tree
    description: 'tree: Poems by type for collector'
    source: sql
    query: 'SELECT t.type_orig_id AS type_id, t.name, COUNT(*) AS y
            FROM
              types t
              JOIN p_typ pt ON pt.t_id = t.t_id
              JOIN p_col pc ON pt.p_id = pc.p_id
              JOIN collectors c ON pc.col_id = c.col_id
            WHERE c.name = "{{{collector}}}"
                  AND ({{{incl_erab_orig}}} OR t.type_orig_id NOT LIKE "erab_orig%")
                  AND t.type_orig_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: collector
        description: 'Collector name'
        widget: selectizeInput
        choices_query: collectors
      - name: incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_parish:
    type: tree
    description: 'tree: Poems by type for parish'
    source: sql
    query: 'SELECT t.type_orig_id AS type_id, t.name, COUNT(*) AS y
            FROM
              types t
              JOIN p_typ pt ON pt.t_id = t.t_id
              JOIN p_pl ON pt.p_id = p_pl.p_id
              JOIN places pl ON p_pl.pl_id = pl.pl_id
            WHERE pl.name = "{{{parish_name}}}"
                  AND ({{{incl_erab_orig}}} OR t.type_orig_id NOT LIKE "erab_orig%")
                  AND t.type_orig_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: parish_name
        description: 'Parish name'
        widget: selectizeInput
        choices_query: places
      - name: incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_time_int:
    type: tree
    description: 'tree: Number of poems in a time interval'
    source: sql
    query: 'SELECT t.type_orig_id AS type_id, t.name, count(*) AS y
            FROM p_year
              JOIN poems p ON p_year.p_id = p.p_id
              JOIN p_typ pt ON p_year.p_id = pt.p_id
              JOIN types t ON pt.t_id = t.t_id
            WHERE p_year.year BETWEEN {{{min}}} AND {{{max}}}
                  AND p.collection = "{{{collection}}}"
                  AND ({{{incl_erab_orig}}} OR t.type_orig_id NOT LIKE "erab_orig%")
            GROUP BY t.t_id;'
    params:
      - name: min
        description: From year
        widget: numericInput
        default: 1800
      - name: max
        description: To year
        widget: numericInput
        default: 1930
      - name: collection
        description: Collection
        widget: selectInput
        choices: [ skvr, erab ]
      - name: incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_volume:
    type: tree
    description: 'tree: Poems by type for SKVR volume'
    source: sql
    query: 'SELECT t.type_orig_id AS type_id, t.name, COUNT(*) AS y
            FROM
              types t
              JOIN p_typ pt ON pt.t_id = t.t_id
              JOIN poems p ON pt.p_id = p.p_id
              JOIN raw_meta rm ON rm.p_id = p.p_id AND rm.field = "OSA"
            WHERE rm.value = "{{{volume}}}" AND p.collection = "skvr"
            GROUP BY t.t_id;'
    params:
      - name: volume
        description: 'Volume'
        widget: selectizeInput
        choices_query: skvr_volumes
  tree_types_cooc:
    type: tree
    description: 'tree: Co-occurring types'
    source: sql
    query: 'SELECT t1.type_orig_id AS type_id, t1.name, COUNT(*) AS y
            FROM
              types t1
              JOIN p_typ pt1 ON pt1.t_id = t1.t_id
              JOIN p_typ pt2 ON pt1.p_id = pt2.p_id AND pt1.t_id <> pt2.t_id
              JOIN types t2 ON pt2.t_id = t2.t_id
            WHERE t2.type_orig_id = "{{{type_id}}}"
                  AND ({{{incl_erab_orig}}} OR t1.type_orig_id NOT LIKE "erab_orig%")
            GROUP BY t1.t_id;'
    params:
      - name: type_id
        description: 'Type'
        widget: selectizeInput
        choices_query: types
      - name: incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_cluster:
    type: tree
    description: 'tree: Verse cluster type distribution'
    source: sql
    query: 'SELECT
               t.type_orig_id AS type_id, t.name, COUNT(*) AS y
            FROM
              poems p
              JOIN verse_poem vp ON vp.p_id = p.p_id
              JOIN v_clust vc ON vc.v_id = vp.v_id
                                 AND vc.clustering_id = {{{clustering}}}
              JOIN v_clust vc2 ON vc2.clust_id = vc.clust_id
                                  AND vc2.clustering_id = vc.clustering_id
              JOIN verse_poem vp2 ON vc2.v_id = vp2.v_id
              JOIN p_typ pt2 ON vp2.p_id = pt2.p_id
              JOIN types t ON pt2.t_id = t.t_id
            WHERE p.nro = "{{{nro}}}" AND vp.pos = {{{pos}}}
                  AND ({{{incl_erab_orig}}} OR t.type_orig_id NOT LIKE "erab_orig%")
            GROUP BY t.t_id;'
    params:
      - name: clustering
        description: 'Clustering'
        widget: selectizeInput
        choices_query: clusterings
      - name: nro
        description: 'Poem ID'
        widget: textInput
      - name: pos
        description: 'Verse position'
        widget: numericInput
      - name: incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_poem_cluster:
    type: tree
    description: 'tree: Poem cluster type distribution'
    source: sql
    query: 'SELECT t.type_orig_id AS type_id, t.name, count(*) AS y
            FROM poems p
              JOIN p_clust pc1 ON p.p_id = pc1.p_id
              JOIN p_clust pc2 ON pc1.clust_id = pc2.clust_id
              JOIN p_typ pt ON pt.p_id = pc2.p_id
              JOIN types t ON t.t_id = pt.t_id
            WHERE p.nro = "{{{nro}}}"
                  AND ({{{incl_erab_orig}}} OR t.type_orig_id NOT LIKE "erab_orig%")
            GROUP BY t.t_id;'
    params:
      - name: nro
        description: 'Poem ID'
        widget: textInput
      - name: incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_octavo:
    type: tree
    description: 'tree: Custom Octavo query'
    source: octavo
    query: '{{{octavo_query}}}'
    fields:
      - type_id
    extractor: 'function(x) x$type_id'
    varname: type_id
    level: '{{{octavo_level}}}'
    snippets: false
    params:
      - name: octavo_query
        description: 'Query'
        widget: textAreaInput
        rows: 5
      - name: octavo_level
        description: 'Level'
        widget: selectInput
        choices: [ VERSE, POEM ]
  tree_custom_sql:
    type: tree
    description: 'tree: Custom SQL query'
    source: sql
    helptext: 'The resulting table should contain the following columns:
               `x` for original type ID (`types.type_orig_id` in the DB) and `y`
               for the value to display.'
    query: '{{{query}}}'
    params:
      - name: query
        description: 'Query'
        widget: textAreaInput
        rows: 5
  tree_custom_csv:
    type: tree
    description: 'tree: Custom CSV'
    source: csv
    helptext: 'The CSV should contain at least the following columns:
               `type_id` for original type id (`types.type_orig_id` in the DB)
               and `y` for the value to display. A header is obligatory.'
    query: '{{{csv}}}'
    params:
      - name: csv
        description: 'Paste CSV here'
        widget: textAreaInput
        rows: 5
  plot_top_collectors:
    type: barplot
    description: 'plot: Top collectors'
    source: sql
    query: 'SELECT c.name AS x, count(*) AS y
            FROM collectors c
              JOIN p_col ON c.col_id = p_col.col_id
            GROUP BY c.col_id
            ORDER BY y DESC
            LIMIT {{{num_collectors}}};'
    params:
      - name: num_collectors
        description: 'Number of collectors to show'
        widget: numericInput
  timeline_parish:
    type: timeline
    description: 'timeline: Parish'
    source: sql
    query: 'SELECT year AS x, COUNT(*) AS y
            FROM p_year
              NATURAL JOIN p_pl
              NATURAL JOIN places
            WHERE name = "{{{parish_name}}}"
            GROUP BY year;'
    params:
      - name: parish_name
        description: 'Parish'
        widget: selectizeInput
        choices_query: places
  wordcloud_octavo:
    type: wordcloud
    description: 'wordcloud: Octavo query'
    source: octavo
    query: '{{{octavo_query}}}'
    level: VERSE
    fields:
    snippets: true
    extractor: 'function(x) lapply(x$snippets, function(y) lapply(y$matches, function(z) z$terms))'
    varname: word
    params:
      - name: octavo_query
        description: 'Query'
        widget: textAreaInput
        rows: 5
visualization_types:
  map:
    params:
      - name: style
        description: Style
        widget: selectInput
        choices: [ cat, cont, sd, equal, fisher, fixed, log10, order, quantile, pretty ]
        default: fisher
      - name: breaks
        description: Breaks (comma-separated)
        condition: 'input.map__style == "fixed"'
        widget: textInput
      - name: classes
        description: Number of classes
        condition: 'input.map__style != "fixed"'
        widget: numericInput
        default: 5
      - name: palette
        description: Palette
        widget: selectInput
        choices: [ YlOrRd, YlOrBr, YlGnBu, YlGn, Reds, Oranges, Greens, Blues,
                   plasma, viridis, Set1, Set2, Set3, Accent ]
        default: YlOrRd
      - name: title
        description: Title
        widget: textInput
      - name: var
        description: Variable name
        widget: textInput
      - name: region
        description: Region
        widget: selectInput
        choices:
          'North and South': 'kaA su ru kaV ka in ve suI ly li x viP viE'
          'North (Finland, Karelia, Ingria)': 'kaA su ru kaV ka in ve suI ly'
          'South (Estonia)': 'viP viE'
  timeline:
    params:
      - name: min
        description: From year
        widget: numericInput
        default: 1800
      - name: max
        description: To year
        widget: numericInput
        default: 1930
      - name: by
        description: By
        widget: radioButtons
        choices: [ decade, year ]
  tree:
    params:
      - name: type
        description: Type
        widget: radioButtons
        choices: [ treemap, sunburst ]
        default: treemap
  barplot:
  wordcloud:
    params:
      - name: min_freq
        description: Min. frequency
        widget: numericInput
        default: 10
      - name: scale
        description: Scale
        widget: numericInput
        default: 1
        step: 0.1
