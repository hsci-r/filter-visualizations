global:
  octavo_endpoint: https://octavo-acathoth.rahtiapp.fi/skvr/
choices_queries:
  collectors: 'SELECT name AS value FROM collectors;'
  places: 'SELECT IF(lp.name IS NOT NULL,
                     CONCAT(l.name, " (", lp.name, ")"),
                     l.name) as label,
                  l.name as value
           FROM locations l
             LEFT JOIN locations lp ON l.par_id = lp.loc_id;'
  themes: 'SELECT CONCAT(name, " (", theme_id, ")") as label, theme_id as value
           FROM themes;'
visualizations:
  map_npoems:
    type: map
    description: 'map: Number of poems'
    source: sql
    query: 'SELECT loc_orig_id, name AS x, count(*) AS y
            FROM locations l
              JOIN p_loc ON l.loc_id = p_loc.loc_id
            GROUP BY l.loc_id;'
  map_type:
    type: map
    description: 'map: Number of poems by type'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM poem_theme pt
              JOIN themes t1 ON pt.t_id = t1.t_id
              LEFT JOIN themes t2 ON t1.par_id = t2.t_id
              LEFT JOIN themes t3 ON t2.par_id = t3.t_id
              LEFT JOIN themes t4 ON t3.par_id = t4.t_id
              JOIN p_loc ON pt.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE t1.theme_id = "@theme_id"
                  OR t2.theme_id = "@theme_id"
                  OR t3.theme_id = "@theme_id"
                  OR t4.theme_id = "@theme_id"
            GROUP BY l.loc_id;'
    params:
      - name: theme_id
        description: 'Type ID'
        widget: selectizeInput
        choices_query: themes
  map_collector:
    type: map
    description: 'map: Number of poems by collector'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM p_col
              JOIN collectors c ON p_col.col_id = c.col_id
              JOIN p_loc ON p_col.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE c.name = "@collector" GROUP BY l.loc_id;'
    params:
      - name: collector
        description: 'Collector name'
        widget: selectizeInput
        choices_query: collectors
  map_cluster:
    type: map
    description: 'map: Verse cluster'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM verse_poem vp1
              JOIN poems p1 ON vp1.p_id = p1.p_id
              JOIN v_clust vc1 ON vc1.v_id = vp1.v_id
              JOIN v_clust vc2 ON vc1.clust_id = vc2.clust_id
              JOIN verse_poem vp2 ON vp2.v_id = vc2.v_id
              JOIN p_loc ON p_loc.p_id = vp2.p_id
              JOIN locations l ON l.loc_id = p_loc.loc_id
            WHERE p1.nro = "@nro" AND vp1.pos = @pos
            GROUP BY l.loc_id;'
    params:
      - name: nro
        description: 'Poem ID'
        widget: textInput
      - name: pos
        description: 'Verse position'
        widget: numericInput
  map_octavo:
    type: map
    description: 'map: Custom Octavo query'
    source: octavo
    query: '@octavo_query'
    fields:
      - place
    group_by: place
    params:
      - name: octavo_query
        description: 'Query'
        widget: textAreaInput
        rows: 5
  map_custom_sql:
    type: map
    description: 'map: Custom SQL query'
    source: sql
    helptext: 'The resulting table should contain the following columns:
               `x` for parish name and `y` for the value to display.'
    query: '@query'
    params:
      - name: query
        description: 'Query'
        widget: textAreaInput
        rows: 5
  tree_types:
    type: tree
    description: 'tree: Poems by type'
    source: sql
    query: 'SELECT t.theme_id AS x, t.name AS label, tp.theme_id AS parent,
                   SUM(IF(pt.p_id IS NULL, 0, 1)) AS y
            FROM
              themes t
              LEFT JOIN poem_theme pt ON pt.t_id = t.t_id
              LEFT JOIN themes tp ON tp.t_id = t.par_id
            WHERE t.theme_id LIKE "@dataset_%"
                  AND t.theme_id NOT LIKE "erab_orig%"
                  AND t.theme_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: dataset
        description: 'Dataset'
        widget: selectInput
        choices: [ skvr, erab ]
        default: skvr_
  tree_types_col:
    type: tree
    description: 'tree: Poems by type for collector'
    source: sql
    query: 'SELECT t.theme_id AS x, t.name AS label, tp.theme_id AS parent,
                   SUM(IF(c.name = "@t_collector", 1, 0)) AS y
            FROM
              themes t
              LEFT JOIN poem_theme pt ON pt.t_id = t.t_id
              LEFT JOIN p_col pc ON pt.p_id = pc.p_id
              LEFT JOIN collectors c ON pc.col_id = c.col_id
              LEFT JOIN themes tp ON tp.t_id = t.par_id
            WHERE pc.col_id IS NULL OR c.name = "@t_collector"
                  AND (@t_col_incl_erab_orig OR t.theme_id NOT LIKE "erab_orig%")
                  AND t.theme_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: t_collector
        description: 'Collector name'
        widget: selectizeInput
        choices_query: collectors
      - name: t_col_incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_parish:
    type: tree
    description: 'tree: Poems by type for parish'
    source: sql
    query: 'SELECT t.theme_id AS x, t.name AS label, tp.theme_id AS parent,
                   SUM(IF(l.name = "@t_parish_name", 1, 0)) AS y
            FROM
              themes t
              LEFT JOIN poem_theme pt ON pt.t_id = t.t_id
              LEFT JOIN p_loc ON pt.p_id = p_loc.p_id
              LEFT JOIN locations l ON p_loc.loc_id = l.loc_id
              LEFT JOIN themes tp ON tp.t_id = t.par_id
            WHERE p_loc.loc_id IS NULL OR l.name = "@t_parish_name"
                  AND (@t_parish_incl_erab_orig OR t.theme_id NOT LIKE "erab_orig%")
                  AND t.theme_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: t_parish_name
        description: 'Parish name'
        widget: selectizeInput
        choices_query: places
      - name: t_parish_incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_cooc:
    type: tree
    description: 'tree: Co-occurring types'
    source: sql
    query: 'SELECT t1.theme_id AS x, t1.name AS label, t1p.theme_id AS parent,
                   SUM(IF(t2.theme_id = "@t_theme_id", 1, 0)) AS y
            FROM
              themes t1
              LEFT JOIN poem_theme pt1 ON pt1.t_id = t1.t_id
              LEFT JOIN poem_theme pt2 ON pt1.p_id = pt2.p_id AND pt1.t_id <> pt2.t_id
              LEFT JOIN themes t2 ON pt2.t_id = t2.t_id
              LEFT JOIN themes t1p ON t1.par_id = t1p.t_id
            WHERE pt1.p_id IS NULL OR t2.theme_id = "@t_theme_id"
                  AND (@t_theme_incl_erab_orig OR t1.theme_id NOT LIKE "erab_orig%")
            GROUP BY t1.t_id;'
    params:
      - name: t_theme_id
        description: 'Type'
        widget: selectizeInput
        choices_query: themes
      - name: t_theme_incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  plot_top_collectors:
    type: barplot
    description: 'plot: Top collectors'
    source: sql
    query: 'SELECT c.name AS x, count(*) AS y
            FROM collectors c
              JOIN p_col ON c.col_id = p_col.col_id
            GROUP BY c.col_id
            ORDER BY y DESC
            LIMIT @num_collectors;'
    params:
      - name: num_collectors
        description: 'Number of collectors to show'
        widget: numericInput
  timeline_parish:
    type: timeline
    description: 'timeline: Parish'
    source: sql
    query: 'SELECT year AS x, COUNT(*) AS y
            FROM p_year
              NATURAL JOIN p_loc
              NATURAL JOIN locations
            WHERE name = "@tl_parish_name"
            GROUP BY year;'
    params:
      - name: tl_parish_name
        description: 'Parish'
        widget: selectizeInput
        choices_query: places
visualization_types:
  map:
    params:
      - name: map_style
        description: Style
        widget: selectInput
        choices: [ cat, cont, sd, equal, fisher, jenks, log10, order, pretty ]
        default: fisher
      - name: map_palette
        description: Palette
        widget: selectInput
        choices: [ YlOrRd, YlOrBr, YlGnBu, YlGn, Reds, Oranges, Greens, Blues,
                   plasma, viridis, Set1, Set2, Set3, Accent ]
        default: YlOrRd
  timeline:
    params:
      - name: tl_min
        description: From year
        widget: numericInput
        default: 1800
      - name: tl_max
        description: To year
        widget: numericInput
        default: 1930
      - name: tl_by
        description: By
        widget: radioButtons
        choices: [ decade, year ]
  tree:
    params:
      - name: tree_type
        description: Type
        widget: radioButtons
        choices: [ treemap, sunburst ]
        default: treemap
  barplot:
