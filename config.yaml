global:
  octavo_endpoint: https://filter-octavo.rahtiapp.fi/filter/
choices_queries:
  collectors: 'SELECT name AS value FROM collectors;'
  places: 'SELECT IF(lp.name IS NOT NULL,
                     CONCAT(l.name, " (", lp.name, ")"),
                     l.name) as label,
                  l.name as value
           FROM locations l
             LEFT JOIN locations lp ON l.par_id = lp.loc_id;'
  themes: 'SELECT CONCAT(name, " (", theme_id, ")") as label, theme_id as value
           FROM themes;'
  clusterings: 'SELECT name AS label, clustering_id AS value FROM v_clusterings;'
  skvr_volumes: 'SELECT DISTINCT value
                 FROM raw_meta NATURAL JOIN poems
                 WHERE nro LIKE "skvr%" AND field = "OSA";'
visualizations:
  map_npoems:
    type: map
    description: 'map: Number of poems'
    source: sql
    query: 'SELECT name AS x, npoems AS y
            FROM locations NATURAL JOIN location_stats;'
  map_nverses:
    type: map
    description: 'map: Number of verses'
    source: sql
    query: 'SELECT name AS x, nverses AS y
            FROM locations NATURAL JOIN location_stats;'
  map_nwords:
    type: map
    description: 'map: Number of words'
    source: sql
    query: 'SELECT name AS x, nwords AS y
            FROM locations NATURAL JOIN location_stats;'
  map_type:
    type: map
    description: 'map: Number of poems by type'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM poem_theme pt
              JOIN themes t1 ON pt.t_id = t1.t_id
              LEFT JOIN themes t2 ON t1.par_id = t2.t_id
              LEFT JOIN themes t3 ON t2.par_id = t3.t_id
              LEFT JOIN themes t4 ON t3.par_id = t4.t_id
              JOIN p_loc ON pt.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE t1.theme_id = "@theme_id"
                  OR t2.theme_id = "@theme_id"
                  OR t3.theme_id = "@theme_id"
                  OR t4.theme_id = "@theme_id"
            GROUP BY l.loc_id;'
    params:
      - name: theme_id
        description: 'Type ID'
        widget: selectizeInput
        choices_query: themes
  map_volume:
    type: map
    description: 'map: Number of poems by SKVR volume'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM poems p
              JOIN raw_meta rm ON p.p_id = rm.p_id AND rm.field = "OSA"
              JOIN p_loc ON p.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE p.nro LIKE "skvr%" AND rm.value = "@volume"
            GROUP BY l.loc_id;'
    params:
      - name: volume
        description: 'Volume'
        widget: selectizeInput
        choices_query: skvr_volumes
  map_collector:
    type: map
    description: 'map: Number of poems by collector'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM p_col
              JOIN collectors c ON p_col.col_id = c.col_id
              JOIN p_loc ON p_col.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE c.name = "@collector" GROUP BY l.loc_id;'
    params:
      - name: collector
        description: 'Collector name'
        widget: selectizeInput
        choices_query: collectors
  map_time_int:
    type: map
    description: 'map: Number of poems in a time interval'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM p_year
              JOIN p_loc ON p_year.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE p_year.year BETWEEN @map_year_min AND @map_year_max
            GROUP BY l.loc_id;'
    params:
      - name: map_year_min
        description: From year
        widget: numericInput
        default: 1800
      - name: map_year_max
        description: To year
        widget: numericInput
        default: 1930
  map_word:
    type: map
    description: 'map: Word frequency'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM words w
              JOIN word_occ wo ON w.w_id = wo.w_id
              JOIN verse_poem vp ON wo.v_id = vp.v_id
              JOIN p_loc ON vp.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE w.text @operator "@word"
            GROUP BY l.loc_id;'
    params:
      - name: word
        description: 'Word'
        widget: textInput
      - name: operator
        description: 'Operator'
        widget: selectInput
        choices: ['=', 'LIKE', 'REGEXP']
  map_word_rel:
    type: map
    description: 'map: Word relative frequency'
    source: sql
    query: 'SELECT l.name AS x, count(*)/ls.nwords AS y
            FROM words w
              JOIN word_occ wo ON w.w_id = wo.w_id
              JOIN verse_poem vp ON wo.v_id = vp.v_id
              JOIN p_loc ON vp.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
              JOIN location_stats ls ON l.loc_id = ls.loc_id
            WHERE w.text @rf_operator "@rf_word"
            GROUP BY l.loc_id;'
    params:
      - name: rf_word
        description: 'Word'
        widget: textInput
      - name: rf_operator
        description: 'Operator'
        widget: selectInput
        choices: ['=', 'LIKE', 'REGEXP']
  map_cluster:
    type: map
    description: 'map: Verse cluster'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM verse_poem vp1
              JOIN poems p1 ON vp1.p_id = p1.p_id
              JOIN v_clust vc1 ON vc1.v_id = vp1.v_id
                                  AND vc1.clustering_id = @clustering
              JOIN v_clust vc2 ON vc1.clust_id = vc2.clust_id
                                  AND vc2.clustering_id = @clustering
              JOIN verse_poem vp2 ON vp2.v_id = vc2.v_id
              JOIN p_loc ON p_loc.p_id = vp2.p_id
              JOIN locations l ON l.loc_id = p_loc.loc_id
            WHERE p1.nro = "@nro" AND vp1.pos = @pos
            GROUP BY l.loc_id;'
    params:
      - name: clustering
        description: 'Clustering'
        widget: selectizeInput
        choices_query: clusterings
      - name: nro
        description: 'Poem ID'
        widget: textInput
      - name: pos
        description: 'Verse position'
        widget: numericInput
  map_sim_poems:
    type: map
    description: 'map: Similar poems'
    source: sql
    query: 'SELECT l.name AS x, count(*) AS y
            FROM p_sim s
              JOIN poems p1 ON s.p1_id = p1.p_id
              JOIN p_loc ON p_loc.p_id = s.p2_id
              JOIN locations l ON l.loc_id = p_loc.loc_id
            WHERE p1.nro = "@sp_nro"
            GROUP BY l.loc_id;'
    params:
      - name: sp_nro
        description: 'Poem ID'
        widget: textInput
  map_octavo:
    type: map
    description: 'map: Custom Octavo query'
    source: octavo
    query: '@octavo_query'
    level: '@octavo_level'
    fields:
      - place_name
    group_by: place_name
    params:
      - name: octavo_query
        description: 'Query'
        widget: textAreaInput
        rows: 5
      - name: octavo_level
        description: 'Level'
        widget: selectInput
        choices: [ VERSE, POEM ]
  map_custom_sql:
    type: map
    description: 'map: Custom SQL query'
    source: sql
    helptext: 'The resulting table should contain the following columns:
               `x` for parish name and `y` for the value to display.'
    query: '@query'
    params:
      - name: query
        description: 'Query'
        widget: textAreaInput
        rows: 5
  map_custom_csv:
    type: map
    description: 'map: Custom CSV'
    source: csv
    helptext: 'The CSV should contain at least the following columns:
               `x` for parish name and `y` for the value to display.
               Header is obligatory.'
    query: '@csv'
    params:
      - name: csv
        description: 'Paste CSV here'
        widget: textAreaInput
        rows: 5
  tree_types:
    type: tree
    description: 'tree: Poems by type'
    source: sql
    query: 'SELECT t.theme_id AS x, t.name, COUNT(*) AS y
            FROM
              themes t
              JOIN poem_theme pt ON pt.t_id = t.t_id
            WHERE t.theme_id LIKE "@dataset_%"
                  AND t.theme_id NOT LIKE "erab_orig%"
                  AND t.theme_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: dataset
        description: 'Dataset'
        widget: selectInput
        choices: [ skvr, erab ]
        default: skvr_
  tree_types_col:
    type: tree
    description: 'tree: Poems by type for collector'
    source: sql
    query: 'SELECT t.theme_id AS x, t.name, COUNT(*) AS y
            FROM
              themes t
              JOIN poem_theme pt ON pt.t_id = t.t_id
              JOIN p_col pc ON pt.p_id = pc.p_id
              JOIN collectors c ON pc.col_id = c.col_id
            WHERE c.name = "@t_collector"
                  AND (@t_col_incl_erab_orig OR t.theme_id NOT LIKE "erab_orig%")
                  AND t.theme_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: t_collector
        description: 'Collector name'
        widget: selectizeInput
        choices_query: collectors
      - name: t_col_incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_parish:
    type: tree
    description: 'tree: Poems by type for parish'
    source: sql
    query: 'SELECT t.theme_id AS x, t.name, COUNT(*) AS y
            FROM
              themes t
              JOIN poem_theme pt ON pt.t_id = t.t_id
              JOIN p_loc ON pt.p_id = p_loc.p_id
              JOIN locations l ON p_loc.loc_id = l.loc_id
            WHERE l.name = "@t_parish_name"
                  AND (@t_parish_incl_erab_orig OR t.theme_id NOT LIKE "erab_orig%")
                  AND t.theme_id NOT LIKE "kt_%"
            GROUP BY t.t_id;'
    params:
      - name: t_parish_name
        description: 'Parish name'
        widget: selectizeInput
        choices_query: places
      - name: t_parish_incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_volume:
    type: tree
    description: 'tree: Poems by type for SKVR volume'
    source: sql
    query: 'SELECT t.theme_id AS x, t.name, COUNT(*) AS y
            FROM
              themes t
              JOIN poem_theme pt ON pt.t_id = t.t_id
              JOIN poems p ON pt.p_id = p.p_id
              JOIN raw_meta rm ON rm.p_id = p.p_id AND rm.field = "OSA"
            WHERE rm.value = "@t_volume" AND p.collection = "skvr"
            GROUP BY t.t_id;'
    params:
      - name: t_volume
        description: 'Volume'
        widget: selectizeInput
        choices_query: skvr_volumes
  tree_types_cooc:
    type: tree
    description: 'tree: Co-occurring types'
    source: sql
    query: 'SELECT t1.theme_id AS x, t1.name, COUNT(*) AS y
            FROM
              themes t1
              JOIN poem_theme pt1 ON pt1.t_id = t1.t_id
              JOIN poem_theme pt2 ON pt1.p_id = pt2.p_id AND pt1.t_id <> pt2.t_id
              JOIN themes t2 ON pt2.t_id = t2.t_id
            WHERE t2.theme_id = "@t_theme_id"
                  AND (@t_theme_incl_erab_orig OR t1.theme_id NOT LIKE "erab_orig%")
            GROUP BY t1.t_id;'
    params:
      - name: t_theme_id
        description: 'Type'
        widget: selectizeInput
        choices_query: themes
      - name: t_theme_incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_types_cluster:
    type: tree
    description: 'tree: Verse cluster type distribution'
    source: sql
    query: 'SELECT
               t.theme_id AS x, t.name, COUNT(*) AS y
            FROM
              poems p
              JOIN verse_poem vp ON vp.p_id = p.p_id
              JOIN v_clust vc ON vc.v_id = vp.v_id
                                 AND vc.clustering_id = @t_theme_clustering
              JOIN v_clust vc2 ON vc2.clust_id = vc.clust_id
                                  AND vc2.clustering_id = vc.clustering_id
              JOIN verse_poem vp2 ON vc2.v_id = vp2.v_id
              JOIN poem_theme pt2 ON vp2.p_id = pt2.p_id
              JOIN themes t ON pt2.t_id = t.t_id
            WHERE p.nro = "@t_theme_nro" AND vp.pos = @t_theme_pos
            GROUP BY t.t_id;'
    params:
      - name: t_theme_clustering
        description: 'Clustering'
        widget: selectizeInput
        choices_query: clusterings
      - name: t_theme_nro
        description: 'Poem ID'
        widget: textInput
      - name: t_theme_pos
        description: 'Verse position'
        widget: numericInput
      - name: t_theme_incl_erab_orig
        description: 'Include ERAB old type index'
        widget: checkboxInput
  tree_octavo:
    type: tree
    description: 'tree: Custom Octavo query'
    source: octavo
    query: '@t_octavo_query'
    fields:
      - theme_id
    level: '@t_octavo_level'
    group_by: theme_id
    params:
      - name: t_octavo_query
        description: 'Query'
        widget: textAreaInput
        rows: 5
      - name: t_octavo_level
        description: 'Level'
        widget: selectInput
        choices: [ VERSE, POEM ]
  tree_custom_sql:
    type: tree
    description: 'tree: Custom SQL query'
    source: sql
    helptext: 'The resulting table should contain the following columns:
               `x` for original type ID (`themes.theme_id` in the DB) and `y`
               for the value to display.'
    query: '@t_query'
    params:
      - name: t_query
        description: 'Query'
        widget: textAreaInput
        rows: 5
  plot_top_collectors:
    type: barplot
    description: 'plot: Top collectors'
    source: sql
    query: 'SELECT c.name AS x, count(*) AS y
            FROM collectors c
              JOIN p_col ON c.col_id = p_col.col_id
            GROUP BY c.col_id
            ORDER BY y DESC
            LIMIT @num_collectors;'
    params:
      - name: num_collectors
        description: 'Number of collectors to show'
        widget: numericInput
  timeline_parish:
    type: timeline
    description: 'timeline: Parish'
    source: sql
    query: 'SELECT year AS x, COUNT(*) AS y
            FROM p_year
              NATURAL JOIN p_loc
              NATURAL JOIN locations
            WHERE name = "@tl_parish_name"
            GROUP BY year;'
    params:
      - name: tl_parish_name
        description: 'Parish'
        widget: selectizeInput
        choices_query: places
visualization_types:
  map:
    params:
      - name: map_style
        description: Style
        widget: selectInput
        choices: [ cat, cont, sd, equal, fisher, fixed, log10, order, quantile, pretty ]
        default: fisher
      - name: map_breaks
        description: Breaks (comma-separated)
        condition: 'input.map_style == "fixed"'
        widget: textInput
      - name: map_classes
        description: Number of classes
        condition: 'input.map_style != "fixed"'
        widget: numericInput
        default: 5
      - name: map_palette
        description: Palette
        widget: selectInput
        choices: [ YlOrRd, YlOrBr, YlGnBu, YlGn, Reds, Oranges, Greens, Blues,
                   plasma, viridis, Set1, Set2, Set3, Accent ]
        default: YlOrRd
      - name: map_title
        description: Title
        widget: textInput
      - name: map_var
        description: Variable name
        widget: textInput
      - name: map_region
        description: Region
        widget: selectInput
        choices:
          'North and South': 'kaA su ru kaV ka in ve suI ly li x viP viE'
          'North (Finland, Karelia, Ingria)': 'kaA su ru kaV ka in ve suI ly'
          'South (Estonia)': 'viP viE li'
  timeline:
    params:
      - name: tl_min
        description: From year
        widget: numericInput
        default: 1800
      - name: tl_max
        description: To year
        widget: numericInput
        default: 1930
      - name: tl_by
        description: By
        widget: radioButtons
        choices: [ decade, year ]
  tree:
    params:
      - name: tree_type
        description: Type
        widget: radioButtons
        choices: [ treemap, sunburst ]
        default: treemap
  barplot:
